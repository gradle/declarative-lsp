/*
 * Copyright 2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This source file was generated by the Gradle 'init' task
 */
package org.gradle.declarative.lsp

import org.eclipse.lsp4j.launch.LSPLauncher
import org.slf4j.Logger
import org.slf4j.LoggerFactory

private val LOGGER: Logger = LoggerFactory.getLogger("org.gradle.declarative.lsp.Main")

fun main() {
    val languageServer = DeclarativeLanguageServer()

    val launcher = LSPLauncher.createServerLauncher(
        languageServer,
        System.`in`,
        System.out
    )
    val remoteProxy = launcher.remoteProxy
    languageServer.connect(remoteProxy)

    // Start the language server
    val listening = launcher.startListening()
    LOGGER.info("Gradle Declartive Language Server: started")
    // Wait until the language server is stopped
    listening.get()
    LOGGER.info("Gradle Declartive Language Server: stopped")
}
